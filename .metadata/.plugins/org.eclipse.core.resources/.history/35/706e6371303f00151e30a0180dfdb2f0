package chap6;
import javassist.gluonj.*;
import stone.Token;
import stone.StoneException;
import stone.ast.*;

import java.util.List;

@Reviser public class BasicEvaluator {
	public static final int TRUE = 1;
	public static final int FALSE = 0;
	@Reviser public static abstract class ASTreeEx extends ASTree{
		public abstract Object eval(Environment env);
	}
	@Reviser public static class ASTListEx extends ASTList{

		public ASTListEx(List<ASTree> c) {
			super(c);
		}
		public Object eval(Environment env){
			throw new StoneException("cannot eval: " + toString(),this);	
		}
	}
	@Reviser public static class ASTLeafEx extends ASTLeaf {
		public ASTLeafEx(Token t){
			super(t);
		}
		public Object eval(Environment env){
			throw new StoneException("cannot eval:" + toString(), this);
		}
	}
	@Reviser public static class NumberEx extends NumberLiteral{
		public NumberEx(Token t){
			super (t);
		}
		public Object eval (Environment r){
			return value();
		}
	}
	@Reviser public static class StringEx extends StringLiteral{
		public StringEx(Token t){
			super(t);
		}
		public Object eval(Environment e){
			return value();
		}
	}
	@Reviser public static class NameEx extends Name{
		public NameEx(Token t){
			super(t);
		}
		public Object eval(Environment env){
			Object value = env.get(name());
			if(value == null)
				throw new StoneException("undefined name:" + name(),this);
			else
				return value;
		}
	}
	@Reviser public static class NegativeEx extends NegativeExpr{
		public NegativeEx(List<ASTree> c){
			super(c);
		}
		public Object eval(Environment env){
			Object v = ((ASTreeEx)operand()).eval(env);
			if(v instanceof Integer)
				return new Integer(-((Integer)v).intValue());
			else
				throw new StoneException("bad type for -",this);
		}
	}
	@Reviser public static class BinaryEx extends BinaryExpr{
		public BinaryEx(List<ASTree> c){
			super(c);
		}
		public Object eval(Environment env){
			String op = operator();
			if("=".equals(op)){
				Object right = ((ASTreeEx)right()).eval(env);
				return computeAssign(env,right);
			}
			else {
				Object left = ((ASTreeEx)left()).eval(env);
				Object right = ((ASTreeEx)right()).eval(env);
				return computeOp(left, op, right);
			}
		}
	}

}
