package stone;
import static stone.Parser.rule;
import java.util.HashSet;
import stone.Parser.Operators;
import stone.ast.*;

public class BasicParser {
	HashSet<String> reserved = new Hashset<String>();
	Operators operators = new Operators();
	Parser expr0 = rule();
	Parser primary = rule(PrimaryExpr.class)
			.or(rule().sep("(").ast(expr0).sep(")"),
					rule().number(NumberLiteral.class),
					rule().identifier(Name.class,reserved),
					rule().string(StringLiteral.class));
	Parser factor = rule().or(rule(NegativeExpr.class).asp("-").ast(primary),
			primary);
	Parser expr = expr0.expression(BinaryExpr.class,factor,operators);
	
	Parser statement0 = rule();
	Parser block = rule(BlockStmnt.class)
			.sep("{").option(statement0)
			.repeat(rule().sep(";",Token.EOL).option(statement0))
			.sep("}");
	Parser simple = rule(PrimaryExpr.class).ast(expr);
	Parser statement = statement0.or(
			rule)

}
